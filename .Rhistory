tck<-seq(.1,1, by=.1)
axis(side=2, pos=-.2, at = tck)
abline(h=max(freqa), col=4)
dev.off()
slidify("index.Rmd")
?slidify
library(smacof)
data(breakfast)
breakfast
res <- smacofRect(breakfast)
plot(res, plot.type = "confplot")
partial_rank<-4-breakfast
partial_rank[partial_rank<1]<-0
apply(breakfast, 2, table)
apply(partial_rank, 2, table)
partial_rank
install.packages(smacof)
install.packages("smacof")
install.packages(smacof)
library(smacof)
data(breakfast)
breakfast
res <- smacofRect(breakfast)
plot(res, plot.type = "confplot")
partial_rank<-4-breakfast
partial_rank[partial_rank<1]<-0
apply(breakfast, 2, table)
apply(partial_rank, 2, table)
partial_rank
install.packages("NMF")
install.packages("psych")
library(NMF)
fit<-nmf(partial_rank, 4, "lee", nrun=10)
h<-coef(fit)
library(psych)
fa.sort(t(round(h,3)))
w<-basis(fit)
wp<-w/apply(w,1,sum)
fa.sort(round(wp,3))
basismap(fit)
?basismap
70^2
70*7
q()
?box
plot(1:7, abs(stats::rnorm(7)), type = "h", axes = FALSE)
axis(1, at = 1:7, labels = letters[1:7])
box(lty = '1373', col = 'red')
plot(1:7, abs(stats::rnorm(7)), type = "h", axes = FALSE)
axis(1, at = 1:7, labels = letters[1:7])
box(lty = '1373', col = 'red')
q()
.14*25
q()
?kruskal.test
q()
25*2750
q()
.33*.335*.58
1/(.33*.335*.58)
4/(.33*.335*.58)
.3^3
1/.027
q()
55*9
q()
.8*.15/(.8*.15+.2*.85)
q()
library(maps)
map("world", interior = FALSE)
q()
pi^pi
pi^pi^pi
pi^(pi^pi)
(pi^pi)^pi
q()
27*26
26^2
q()
3365*3
q()
10451.51-3951.52
11975.23-6500
3900+5475
9375-1500
3930+5475
3930+5475-1500
260+960+1030+780+6500
13000-9500
q()
237.77+238.80+238+527.06
q()
200*.19
38*3
20000*.10
745.23+824.06+1427.73+1007.56+1007.56+1141.71+2061.08-998+1066.39+1418.96
9702.28+1404+10451.51
q()
1418.96-387
1418.96-387-700
q()
getwd()
q()
2*(1007.56-300)+1179.84-400+1000
80+81+118+30+150
6500+500+542.23
6500+500+542.23+3194.96
10.192,23
10192.23
q()
1007.56-300
1179.84-400
1427.73-427.73
2*(1007.56-300)+1179.84-400
707.56*2+779.84
q()
x <- c(0,0,0,100,0,0,0)
y <- c(0,0,1, 2 ,1,0,0)/4
zapsmall(convolve(x, y))
zapsmall(convolve(x, y[3:5], type = "f"))
x <- c(0,0,0,100,0,0,0)
y <- c(0,0,1, 2 ,1,0,0)/4
zapsmall(convolve(x, y), type="f")
x <- c(0,0,0,100,0,0,0)
y <- c(0,0,1, 2 ,1,0,0)/4
zapsmall(convolve(x, y, type="f"))
x <- c(0,0,0,100,0,0,0)
y <- c(0,0,1, 2 ,1,0,0)/4
zapsmall(convolve(x, y, type="o"))
q()
# http://blogs.sas.com/content/iml/2012/12/14/a-fractal-christmas-tree/
# Each row is a 2x2 linear transformation
# Christmas tree
L <-  matrix(
c(0.03,  0,     0  ,  0.1,
0.85,  0.00,  0.00, 0.85,
0.8,   0.00,  0.00, 0.8,
0.2,  -0.08,  0.15, 0.22,
-0.2,   0.08,  0.15, 0.22,
0.25, -0.1,   0.12, 0.25,
-0.2,   0.1,   0.12, 0.2),
nrow=4)
# ... and each row is a translation vector
B <- matrix(
c(0, 0,
0, 1.5,
0, 1.5,
0, 0.85,
0, 0.85,
0, 0.3,
0, 0.4),
nrow=2)
prob = c(0.02, 0.6,.08, 0.07, 0.07, 0.07, 0.07)
# Iterate the discrete stochastic map
N = 1e5 #5  #   number of iterations
x = matrix(NA,nrow=2,ncol=N)
x[,1] = c(0,2)   # initial point
k <- sample(1:7,N,prob,replace=TRUE) # values 1-7
for (i in 2:N)
x[,i] = crossprod(matrix(L[,k[i]],nrow=2),x[,i-1]) + B[,k[i]] # iterate
# Plot the iteration history
png('card.png')
par(bg='darkblue',mar=rep(0,4))
plot(x=x[1,],y=x[2,],
col=grep('green',colors(),value=TRUE),
axes=FALSE,
cex=.1,
xlab='',
ylab='' )#,pch='.')
bals <- sample(N,20)
points(x=x[1,bals],y=x[2,bals]-.1,
col=c('red','blue','yellow','orange'),
cex=2,
pch=19
)
text(x=-.7,y=8,
labels='Merry',
adj=c(.5,.5),
srt=45,
vfont=c('script','plain'),
cex=3,
col='gold'
)
text(x=0.7,y=8,
labels='Christmas',
adj=c(.5,.5),
srt=-45,
vfont=c('script','plain'),
cex=3,
col='gold'
)
dev.off()
q()
n <- 11
m <- (n-1)/2
x <- cos(2*pi*(1:n))
x <- cos(2*pi*(1:n)/n)
y <- sin(2*pi(1:n)/n)
y <- sin(2*pi*(1:n)/n)
plot(x,y)
?mod
5%%4
(ln*m)%%n+1
n <- 11
ln <- 1:n
m <- (n-1)/2
x <- cos(2*pi*ln/n)
y <- sin(2*pi*ln/n)
(ln*m)%%n+1
y <- sin(2*pi*ln/n)
z <- (ln*m)%%n+1
plot(x[z], y[z)])
plot(x[z], y[z])
plot(x[z], y[z], type="l")
ln <- 0:n
m <- (n-1)/2
m <- (n-1)/2
source('~/.active-rstudio-document', echo=TRUE)
plot(x,y, pch=21)
?par
plot(x[z], y[z], type="l", col=4, lwd=4, width=5, height=5)
points(x,y, pch=19, col=5)
?par
par(fin=c(5,5))
plot(x[z], y[z], type="l", col=4, lwd=4)
points(x,y, pch=19, col=5)
?rgb
?par
starFig <- function(nD){
n <- nD
ln <- 0:n
m <- (n-1)/2
y <- cos(2*pi*ln/n)
x <- sin(2*pi*ln/n)
z <- (ln*m)%%n+1
purple <- rgb(.5,0,1)
red <- rgb(1,0,1)
par(fin=c(5,5))
plot(x[z], y[z], type="l", col=purple, lwd=3, xaxt="n", yaxt="n", ylab="", xlab="")
points(x,y, pch=19, col=red)
}
starFig(7)
?par
q()
q()
.25/1.55
.2/1.2
.15/1.02
.16/1.02
q()
install.packages(edgeR)
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz", type = "source")
biocLite("edgeR")
library(edgeR)
load("wntCounts.RData") ### contains a variable D.counts with the the count data
load("wntExonLen.RData") ### contains a variable Dlength with the gene exon lengths
setwd("~/juicy/BioStatWork2012/WNTmodelSoft/wntISMB2015/wntSupp")
getwd()
load("wntCounts.RData") ### contains a variable D.counts with the the count data
load("wntExonLen.RData") ### contains a variable Dlength with the gene exon lengths
Dlonger150 <- Dlength[which(Dlength > 150)]
Dsymbols <- names(Dlonger150)[names(Dlonger150)%in%rownames(D.counts)]
D2analysis <- D.counts[Dsymbols,]
DsubNames <- grep("_1|_2", colnames(D2analysis), value=TRUE)
DsubNames <- DsubNames[-c(14:18)]
DsubNames
DsubJ <- D2analysis[,DsubNames]
colnames(DsubJ)
dim(DsubJ)
library(limma)
library(edgeR)
isexpr <- rowSums(cpm(DsubJ)>1) >= 1
Dsel <- DsubJ[isexpr,]
colnames(Dsel) <- colnames(DsubJ)
dim(Dsel)
pickNames <- function(x) head(unlist(strsplit(x, split="_")),1)
exps <- factor(unname(sapply(colnames(Dsel), pickNames)))
design <- model.matrix(~0 + exps)
colnames(design) <- make.names(gsub("exps","",colnames(design)))
# image(t(apply(t(design), 1, rev)) ) # graphical visualization of design matrix
colnames(Dsel) <- unname(sapply(colnames(Dsel), pickNames))
D4nem <- voom(Dsel,design, plot=TRUE)
applyLimma <- function (jdata, ctrl, pr=.01)
{
require(limma)
cn <- colnames(jdata)
colnames(jdata) <- make.names(colnames(jdata))
exps <- factor(colnames(jdata))
design <- model.matrix(~0 + exps)
colnames(design) <- unique(cn)
cn <- setdiff(cn, ctrl)
fit1 <- lmFit(jdata, design)
contrast.matrix <- makeContrasts(contrasts = paste(cn, "-", ctrl, sep = ""), levels = design)
fit2 <- contrasts.fit(fit1, contrast.matrix)
WNTfit <- eBayes(fit2, pr)
res<-list(WNTfit,names=cn)
return(res)
}
netScore <-function (jPhi, jD){
if (!all(diag(jPhi) == 1))
diag(jPhi) <- 1
numbSgene <- ncol(jD)
Escore <- exp(log(jD) %*% jPhi + log(1 - jD) %*% (1 - jPhi))
jScRes <- sum(log(rowSums(Escore)/numbSgene))
}
fullSimpleBF <- function(sNew, sStd){
sCor <- log(length(sStd)) - log(length(sNew))
# size correction (accounts for different number of models/complexity, a typical feature of Bayes Factors
Mn <- max(sNew)
Ms <- max(sStd)
logBF <- sCor + Mn - Ms + log(sum(exp(sNew-Mn))) - log(sum(exp(sStd-Ms)))
c(logBF=logBF, BF=exp(logBF))
}
subJdata <- D4nem
subJlim <- applyLimma(subJdata, ctrl="CTRL", pr=.004)
subJlim <- applyLimma(subJdata, ctrl="CTRL", pr=.004)
subJlim <- applyLimma(subJdata, ctrl="CTRL", pr=.004)
subJlim <- applyLimma(subJdata, ctrl="CTRL", pr=.004)
subJlim <- applyLimma(subJdata, ctrl="CTRL", pr=.004)
head(subJdata)
jdata <- subJdata
cn <- colnames(jdata)
colnames(jdata) <- make.names(colnames(jdata))
?make.names
make.names("a", "a")
colnames(jdata) <- make.names(colnames(jdata), unique=FALSE)
colnames(jdata)
cn
make.names(cn)
cn <- colnames(jdata)
colnames(jdata) <- make.names(cn)
exps <- factor(colnames(jdata))
design <- model.matrix(~0 + exps)
colnames(design) <- unique(cn)
cn <- setdiff(cn, ctrl)
fit1 <- lmFit(jdata, design)
contrast.matrix <- makeContrasts(contrasts = paste(cn, "-", ctrl, sep = ""), levels = design)
fit2 <- contrasts.fit(fit1, contrast.matrix)
WNTfit <- eBayes(fit2, pr)
res<-list(WNTfit,names=cn)
return(res)
applyLimma <- function (jdata, ctrl, pr=.01)
{
require(limma)
cn <- colnames(jdata)
colnames(jdata) <- make.names(cn)
exps <- factor(colnames(jdata))
design <- model.matrix(~0 + exps)
colnames(design) <- unique(cn)
cn <- setdiff(cn, ctrl)
fit1 <- lmFit(jdata, design)
contrast.matrix <- makeContrasts(contrasts = paste(cn, "-", ctrl, sep = ""), levels = design)
fit2 <- contrasts.fit(fit1, contrast.matrix)
WNTfit <- eBayes(fit2, pr)
res<-list(WNTfit,names=cn)
return(res)
}
netScore <-function (jPhi, jD){
if (!all(diag(jPhi) == 1))
diag(jPhi) <- 1
numbSgene <- ncol(jD)
Escore <- exp(log(jD) %*% jPhi + log(1 - jD) %*% (1 - jPhi))
jScRes <- sum(log(rowSums(Escore)/numbSgene))
}
fullSimpleBF <- function(sNew, sStd){
sCor <- log(length(sStd)) - log(length(sNew))
# size correction (accounts for different number of models/complexity, a typical feature of Bayes Factors
Mn <- max(sNew)
Ms <- max(sStd)
logBF <- sCor + Mn - Ms + log(sum(exp(sNew-Mn))) - log(sum(exp(sStd-Ms)))
c(logBF=logBF, BF=exp(logBF))
}
subJdata <- D4nem
subJlim <- applyLimma(subJdata, ctrl="CTRL", pr=.004)
jdata
cn <- colnames(jdata)
colnames(jdata) <- make.names(cn)
subJodd <- exp(subJlim[[1]]$lods) # log-odds
subJdata <- D4nem
subJlim <- applyLimma(subJdata, ctrl="CTRL", pr=.004)
applyLimma <- function (jdata, ctrl, pr=.01)
{
require(limma)
cn <- colnames(jdata)
#  colnames(jdata) <- make.names(cn)
exps <- factor(colnames(jdata))
design <- model.matrix(~0 + exps)
colnames(design) <- unique(cn)
cn <- setdiff(cn, ctrl)
fit1 <- lmFit(jdata, design)
contrast.matrix <- makeContrasts(contrasts = paste(cn, "-", ctrl, sep = ""), levels = design)
fit2 <- contrasts.fit(fit1, contrast.matrix)
WNTfit <- eBayes(fit2, pr)
res<-list(WNTfit,names=cn)
return(res)
}
subJlim <- applyLimma(subJdata, ctrl="CTRL", pr=.004)
subJodd <- exp(subJlim[[1]]$lods) # log-odds
colnames(subJodd) <- subJlim$names
subJodd <- subJodd/(1+subJodd)
# posterior probabilities of differential expression
postProbDE <- subJodd
opts_chunk$set(cache=FALSE, autodep=TRUE)
b <- ((1:4)*2-1)/7
r <- b*.85
g <- b*.7
jpurp <- rgb(4*.85/7, 4*.7/7, 4/7)
jpurp2 <- rgb(5*.85/7, 5*.7/7, 5/7)
cpmD <- cpm(DsubJ)
cpmDlog <- log2(cpmD[isexpr,])
par(mfrow=c(1,2), cex=1.2)
plot(cpmDlog[,"CTNNB1_1"]-cpmDlog[,"CTRL_1"],
cpmDlog[,"CTNNB1_2"]-cpmDlog[,"CTRL_2"],
ylab="log-FC, Bcat-ctrl, R1",
xlab="log-FC, Bcat-ctrl, R2",
pch=20, col=jpurp)
plot(cpmDlog[,"APC_1"]-cpmDlog[,"CTRL_1"],
cpmDlog[,"APC_2"]-cpmDlog[,"CTRL_2"],
ylab="log-FC APC-ctrl, rep 1",
xlab="log-FC APC-ctrl, rep 2",
pch=20, col=jpurp)
par(mfrow=c(1,2), cex=1.2)
plot(cpmDlog[,"EVI_1"]-cpmDlog[,"CTRL_1"],
cpmDlog[,"EVI_2"]-cpmDlog[,"CTRL_2"],
ylab="log-FC, EVI-ctrl, R1",
xlab="log-FC, EVI-ctrl, R2",
pch=20, col=jpurp)
plot(cpmDlog[,"EVI_1"], cpmDlog[,"EVI_2"],
ylab="log-cpm, EVI kd, R1",
xlab="log-cpm, EVI kd, R2",
pch=20, col=jpurp)
par(cex=1.4)
plot(cpmDlog[,"EVI_1"]-cpmDlog[,"CTRL_1"],
cpmDlog[,"EVI_2"]-cpmDlog[,"CTRL_2"],
ylab="log-FC, EVI-ctrl, R1",
xlab="log-FC, EVI-ctrl, R2",
pch=".", col=jpurp)
par(cex=1.4)
plot(cpmDlog[,"EVI_1"], cpmDlog[,"EVI_2"],
ylab="log-cpm, EVI kd, R1",
xlab="log-cpm, EVI kd, R2",
pch=".", col=jpurp)
par(cex=1.4)
plot(cpmDlog[,"EVI_1"]-cpmDlog[,"CTRL_1"],
cpmDlog[,"EVI_2"]-cpmDlog[,"CTRL_2"],
ylab="log-FC, EVI-ctrl, R1",
xlab="log-FC, EVI-ctrl, R2",
pch=".", col=jpurp)
par(cex=1.4)
plot(cpmDlog[,"EVI_1"], cpmDlog[,"EVI_2"],
ylab="log-cpm, EVI kd, R1",
xlab="log-cpm, EVI kd, R2",
pch=".", col=jpurp)
knockdown <- c("CTNNB1", "EVI", "APC", "TCF7L2")
geneTarget <- c("CTNNB1", "WLS", "APC", "TCF7L2") ### WLS is the EVI genen symbol
genePick <- c(geneTarget,"AXIN2", "ACTB")
postProbDE[genePick, knockdown]
knockEff <- topTable(subJlim[[1]], adjust="BH",
n=length(postProbDE[,1]))[genePick,]
knockNames <- paste0(knockdown,".","CTRL")
knockObs <- cbind(geneTarget, knockNames)
knockPlot <- c(1,2^as.numeric(knockEff[knockObs]))
postProbDE[geneTarget,]
## effectively the posterio probabilities are estimated as being all 1
topTable(subJlim[[1]], coef=4, adjust="BH", n=3)
## coef=4 corresponds to "CTNNB1" knockdown, and actually it comes top in the effects
BetaCatRank <- topTable(subJlim[[1]], coef=4, adjust="BH",
n=length(postProbDE[,1]))
BetaCatRank[which(BetaCatRank$ID %in% genePick),]
par(cex=1.2)
barplot(knockPlot, width=.2, space=2, names.arg=c("CTRL",knockdown),
xlim=c(0,3), cex.axis=1.1, axis.lty=1, ylab="knockdown efficiencies",
col=jpurp)
knockdown <- c("CTNNB1", "EVI", "APC", "TCF7L2")
wntTargets <- c("AXIN2", "RUNX2", "SMAD7")
postProbDE[wntTargets, knockdown]
wntEff <- topTable(subJlim[[1]], adjust="BH",
n=length(postProbDE[,1]))[wntTargets,]
knockNames <- paste0(knockdown,".","CTRL")
wntObs <- cbind(rep(wntTargets, each=length(knockdown)),
rep(knockNames, length(wntTargets)) )
# knockCol <- rainbow(length(knockdown), start=.6, end=1, alpha = .4)
knockCol <- rgb(r,g,b)
names(knockCol) <- knockdown
layout(matrix(c(1,2)), heights=c(1,3))
par(mar = c(1,4,2,4), cex=1.5)
mid_bar <- barplot(t(postProbDE[wntTargets, knockdown]),
width=.1, space=c(4,14), beside=TRUE,
col="white", xlim=c(0,11),
legend.text=knockdown,
args.legend=list(x=12, y=.9, fill=knockCol, bty="n"),
ylab="pp DE",
border=NA, xaxt="n")
segments(as.vector(mid_bar)-.2, rep(0, length(mid_bar)),
as.vector(mid_bar)-.2, as.vector(t(postProbDE[wntTargets, knockdown])),
col=knockCol, lwd=5, lend=2)
# abline(h=.5, col=rgb(1, .4, 0), lwd=2, lty=2)
segments(-1, .5, 9, .5, lwd=2, lty=2, col=rgb(1, .4, 0))
abline(h=0)
par(mar = c(4,4,1,4))
barplot(t(as.matrix(wntEff[,knockNames])),
width=.5, space=c(0,2), beside=TRUE,
col=knockCol, xlim=c(0,11), xpd=FALSE,
ylab="Log Fold Change",
#        legend.text=knockdown,
#        args.legend=list(x=17, y=-1, fill=knockCol, bty="n"),
names.arg=wntTargets)
abline(h=0)
biocLite("Rgraphviz", type = "source")
biocLite("Rgraphviz", type = "source")
q()
